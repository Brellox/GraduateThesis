//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 15 colors.
  struct color {
    /// Color `BackgroundColour`.
    static let backgroundColour = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundColour")
    /// Color `ButtColour`.
    static let buttColour = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtColour")
    /// Color `DarkgreenColour`.
    static let darkgreenColour = Rswift.ColorResource(bundle: R.hostingBundle, name: "DarkgreenColour")
    /// Color `ExamClosedColour`.
    static let examClosedColour = Rswift.ColorResource(bundle: R.hostingBundle, name: "ExamClosedColour")
    /// Color `ExamFinishedColour`.
    static let examFinishedColour = Rswift.ColorResource(bundle: R.hostingBundle, name: "ExamFinishedColour")
    /// Color `ExamGreenColour`.
    static let examGreenColour = Rswift.ColorResource(bundle: R.hostingBundle, name: "ExamGreenColour")
    /// Color `ExamOngoingColour`.
    static let examOngoingColour = Rswift.ColorResource(bundle: R.hostingBundle, name: "ExamOngoingColour")
    /// Color `ExamRedactColour`.
    static let examRedactColour = Rswift.ColorResource(bundle: R.hostingBundle, name: "ExamRedactColour")
    /// Color `ExamYellowColour`.
    static let examYellowColour = Rswift.ColorResource(bundle: R.hostingBundle, name: "ExamYellowColour")
    /// Color `GreenColour`.
    static let greenColour = Rswift.ColorResource(bundle: R.hostingBundle, name: "GreenColour")
    /// Color `LightBackgroundBack`.
    static let lightBackgroundBack = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightBackgroundBack")
    /// Color `PinkColour`.
    static let pinkColour = Rswift.ColorResource(bundle: R.hostingBundle, name: "PinkColour")
    /// Color `RedColour`.
    static let redColour = Rswift.ColorResource(bundle: R.hostingBundle, name: "RedColour")
    /// Color `YellowColour`.
    static let yellowColour = Rswift.ColorResource(bundle: R.hostingBundle, name: "YellowColour")
    /// Color `timelineColour`.
    static let timelineColour = Rswift.ColorResource(bundle: R.hostingBundle, name: "timelineColour")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundColour", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundColour(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundColour, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtColour", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttColour(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttColour, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DarkgreenColour", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkgreenColour(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkgreenColour, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ExamClosedColour", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func examClosedColour(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.examClosedColour, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ExamFinishedColour", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func examFinishedColour(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.examFinishedColour, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ExamGreenColour", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func examGreenColour(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.examGreenColour, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ExamOngoingColour", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func examOngoingColour(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.examOngoingColour, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ExamRedactColour", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func examRedactColour(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.examRedactColour, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ExamYellowColour", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func examYellowColour(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.examYellowColour, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GreenColour", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func greenColour(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.greenColour, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LightBackgroundBack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightBackgroundBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightBackgroundBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PinkColour", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func pinkColour(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.pinkColour, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "RedColour", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func redColour(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.redColour, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "YellowColour", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellowColour(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellowColour, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "timelineColour", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func timelineColour(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.timelineColour, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BackgroundColour", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundColour(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundColour.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtColour", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttColour(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttColour.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DarkgreenColour", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func darkgreenColour(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.darkgreenColour.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ExamClosedColour", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func examClosedColour(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.examClosedColour.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ExamFinishedColour", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func examFinishedColour(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.examFinishedColour.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ExamGreenColour", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func examGreenColour(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.examGreenColour.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ExamOngoingColour", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func examOngoingColour(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.examOngoingColour.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ExamRedactColour", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func examRedactColour(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.examRedactColour.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ExamYellowColour", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func examYellowColour(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.examYellowColour.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GreenColour", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func greenColour(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.greenColour.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LightBackgroundBack", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightBackgroundBack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightBackgroundBack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PinkColour", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func pinkColour(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.pinkColour.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "RedColour", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func redColour(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.redColour.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "YellowColour", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yellowColour(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yellowColour.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "timelineColour", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func timelineColour(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.timelineColour.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 27 images.
  struct image {
    /// Image `DOCX`.
    static let docX = Rswift.ImageResource(bundle: R.hostingBundle, name: "DOCX")
    /// Image `DOC`.
    static let doC = Rswift.ImageResource(bundle: R.hostingBundle, name: "DOC")
    /// Image `JPEG`.
    static let jpeG = Rswift.ImageResource(bundle: R.hostingBundle, name: "JPEG")
    /// Image `JPG`.
    static let jpG = Rswift.ImageResource(bundle: R.hostingBundle, name: "JPG")
    /// Image `PDF`.
    static let pdF = Rswift.ImageResource(bundle: R.hostingBundle, name: "PDF")
    /// Image `PNG`.
    static let pnG = Rswift.ImageResource(bundle: R.hostingBundle, name: "PNG")
    /// Image `RAR`.
    static let raR = Rswift.ImageResource(bundle: R.hostingBundle, name: "RAR")
    /// Image `TXT`.
    static let txT = Rswift.ImageResource(bundle: R.hostingBundle, name: "TXT")
    /// Image `Unknown`.
    static let unknown = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unknown")
    /// Image `XML`.
    static let xmL = Rswift.ImageResource(bundle: R.hostingBundle, name: "XML")
    /// Image `ZIP`.
    static let ziP = Rswift.ImageResource(bundle: R.hostingBundle, name: "ZIP")
    /// Image `abs`.
    static let abs = Rswift.ImageResource(bundle: R.hostingBundle, name: "abs")
    /// Image `camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera")
    /// Image `clock`.
    static let clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "clock")
    /// Image `cross`.
    static let cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "cross")
    /// Image `doc`.
    static let doc = Rswift.ImageResource(bundle: R.hostingBundle, name: "doc")
    /// Image `eye`.
    static let eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye")
    /// Image `eyecross`.
    static let eyecross = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyecross")
    /// Image `fileButt`.
    static let fileButt = Rswift.ImageResource(bundle: R.hostingBundle, name: "fileButt")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `messages`.
    static let messages = Rswift.ImageResource(bundle: R.hostingBundle, name: "messages")
    /// Image `photo`.
    static let photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo")
    /// Image `plusButt`.
    static let plusButt = Rswift.ImageResource(bundle: R.hostingBundle, name: "plusButt")
    /// Image `repeat`.
    static let `repeat` = Rswift.ImageResource(bundle: R.hostingBundle, name: "repeat")
    /// Image `sendButt`.
    static let sendButt = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendButt")
    /// Image `tick`.
    static let tick = Rswift.ImageResource(bundle: R.hostingBundle, name: "tick")
    /// Image `trash`.
    static let trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DOC", bundle: ..., traitCollection: ...)`
    static func doC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DOCX", bundle: ..., traitCollection: ...)`
    static func docX(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.docX, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "JPEG", bundle: ..., traitCollection: ...)`
    static func jpeG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jpeG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "JPG", bundle: ..., traitCollection: ...)`
    static func jpG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jpG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PDF", bundle: ..., traitCollection: ...)`
    static func pdF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pdF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PNG", bundle: ..., traitCollection: ...)`
    static func pnG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pnG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RAR", bundle: ..., traitCollection: ...)`
    static func raR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.raR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TXT", bundle: ..., traitCollection: ...)`
    static func txT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.txT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Unknown", bundle: ..., traitCollection: ...)`
    static func unknown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unknown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "XML", bundle: ..., traitCollection: ...)`
    static func xmL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xmL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ZIP", bundle: ..., traitCollection: ...)`
    static func ziP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ziP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "abs", bundle: ..., traitCollection: ...)`
    static func abs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.abs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clock", bundle: ..., traitCollection: ...)`
    static func clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cross", bundle: ..., traitCollection: ...)`
    static func cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cross, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doc", bundle: ..., traitCollection: ...)`
    static func doc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eye", bundle: ..., traitCollection: ...)`
    static func eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyecross", bundle: ..., traitCollection: ...)`
    static func eyecross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyecross, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fileButt", bundle: ..., traitCollection: ...)`
    static func fileButt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fileButt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "messages", bundle: ..., traitCollection: ...)`
    static func messages(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messages, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photo", bundle: ..., traitCollection: ...)`
    static func photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plusButt", bundle: ..., traitCollection: ...)`
    static func plusButt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plusButt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "repeat", bundle: ..., traitCollection: ...)`
    static func `repeat`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`repeat`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendButt", bundle: ..., traitCollection: ...)`
    static func sendButt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendButt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tick", bundle: ..., traitCollection: ...)`
    static func tick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trash", bundle: ..., traitCollection: ...)`
    static func trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `AnswerTableViewCell`.
    static let answerTableViewCell = _R.nib._AnswerTableViewCell()
    /// Nib `ExamButton`.
    static let examButton = _R.nib._ExamButton()
    /// Nib `ExamTableViewCell`.
    static let examTableViewCell = _R.nib._ExamTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AnswerTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.answerTableViewCell) instead")
    static func answerTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.answerTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ExamButton", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.examButton) instead")
    static func examButton(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.examButton)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ExamTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.examTableViewCell) instead")
    static func examTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.examTableViewCell)
    }
    #endif

    static func answerTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnswerTableViewCell? {
      return R.nib.answerTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnswerTableViewCell
    }

    static func examButton(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.examButton.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func examTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExamTableViewCell? {
      return R.nib.examTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExamTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ExamTableViewCell`.
    static let examTableViewCell: Rswift.ReuseIdentifier<ExamTableViewCell> = Rswift.ReuseIdentifier(identifier: "ExamTableViewCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AnswerTableViewCell.validate()
      try _ExamTableViewCell.validate()
    }

    struct _AnswerTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AnswerTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnswerTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnswerTableViewCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark.circle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'checkmark.circle' is used in nib 'AnswerTableViewCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColour", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColour' is used in nib 'AnswerTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DarkgreenColour", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkgreenColour' is used in nib 'AnswerTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ExamButton: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ExamButton"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ExamTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ExamTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ExamTableViewCell"
      let name = "ExamTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExamTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExamTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "trash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'trash' is used in nib 'ExamTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ButtColour", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ButtColour' is used in nib 'ExamTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let addExamViewController = StoryboardViewControllerResource<AddExamViewController>(identifier: "AddExamViewController")
      let alterExamViewController = StoryboardViewControllerResource<AlterExamViewController>(identifier: "AlterExamViewController")
      let answersViewController = StoryboardViewControllerResource<AnswersViewController>(identifier: "AnswersViewController")
      let bundle = R.hostingBundle
      let datePickerPopUpViewController = StoryboardViewControllerResource<DatePickerPopUpViewController>(identifier: "DatePickerPopUpViewController")
      let examListViewController = StoryboardViewControllerResource<ExamListViewController>(identifier: "ExamListViewController")
      let logInViewController = StoryboardViewControllerResource<LogInViewController>(identifier: "LogInViewController")
      let name = "Main"
      let pickerPopUpViewController = StoryboardViewControllerResource<PickerPopUpViewController>(identifier: "PickerPopUpViewController")
      let shareViewController = StoryboardViewControllerResource<ShareViewController>(identifier: "ShareViewController")
      let taskAnswerViewController = StoryboardViewControllerResource<TaskAnswerViewController>(identifier: "TaskAnswerViewController")

      func addExamViewController(_: Void = ()) -> AddExamViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addExamViewController)
      }

      func alterExamViewController(_: Void = ()) -> AlterExamViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: alterExamViewController)
      }

      func answersViewController(_: Void = ()) -> AnswersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: answersViewController)
      }

      func datePickerPopUpViewController(_: Void = ()) -> DatePickerPopUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: datePickerPopUpViewController)
      }

      func examListViewController(_: Void = ()) -> ExamListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: examListViewController)
      }

      func logInViewController(_: Void = ()) -> LogInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: logInViewController)
      }

      func pickerPopUpViewController(_: Void = ()) -> PickerPopUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pickerPopUpViewController)
      }

      func shareViewController(_: Void = ()) -> ShareViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shareViewController)
      }

      func taskAnswerViewController(_: Void = ()) -> TaskAnswerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: taskAnswerViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "PNG", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PNG' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkmar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkmar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "doc", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'doc' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eyecross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eyecross' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fileButt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fileButt' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plusButt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plusButt' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sendButt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sendButt' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColour", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColour' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "ButtColour", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ButtColour' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "RedColour", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'RedColour' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().addExamViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addExamViewController' could not be loaded from storyboard 'Main' as 'AddExamViewController'.") }
        if _R.storyboard.main().alterExamViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'alterExamViewController' could not be loaded from storyboard 'Main' as 'AlterExamViewController'.") }
        if _R.storyboard.main().answersViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'answersViewController' could not be loaded from storyboard 'Main' as 'AnswersViewController'.") }
        if _R.storyboard.main().datePickerPopUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'datePickerPopUpViewController' could not be loaded from storyboard 'Main' as 'DatePickerPopUpViewController'.") }
        if _R.storyboard.main().examListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'examListViewController' could not be loaded from storyboard 'Main' as 'ExamListViewController'.") }
        if _R.storyboard.main().logInViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'logInViewController' could not be loaded from storyboard 'Main' as 'LogInViewController'.") }
        if _R.storyboard.main().pickerPopUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pickerPopUpViewController' could not be loaded from storyboard 'Main' as 'PickerPopUpViewController'.") }
        if _R.storyboard.main().shareViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shareViewController' could not be loaded from storyboard 'Main' as 'ShareViewController'.") }
        if _R.storyboard.main().taskAnswerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'taskAnswerViewController' could not be loaded from storyboard 'Main' as 'TaskAnswerViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
